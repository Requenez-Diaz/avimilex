<?xml version="1.0" encoding="UTF-8"?>
<aiml version="2.0">
    	<!-- insert your AIML categories here -->

    <category>
    <pattern>Hola</pattern>
    <template>Welcome</template>
    </category>
    
    <category>
        <pattern>¿Qué es Node.js y para qué se utiliza?</pattern>
        <template>
        Node.js es un entorno de tiempo de ejecución de JavaScript 
        de código abierto y multiplataforma. Se utiliza para construir aplicaciones de servidor que ejecutan código 
        JavaScript en el lado del servidor en lugar de en el navegador del cliente. 
        Node.js se utiliza para construir aplicaciones web, aplicaciones móviles, aplicaciones de escritorio y mucho más
        </template>
    </category>
    
    <category>
        <pattern>¿Cómo se instala Node.js?</pattern>
        <template>
            Para instalar Node.js, primero debes ir al sitio web 
            oficial de Node.js y descargar el instalador adecuado para tu sistema operativo. Una vez descargado, ejecuta el instalador y 
            sigue las instrucciones en pantalla para completar la instalación.
        </template>
    </category>
        
     <category>
        <pattern>¿Cuál es la principal característica de Node.js?</pattern>
        <template>
            La principal característica de Node.js es que utiliza un modelo de E/S sin bloqueo y basado en eventos.
            Esto significa que Node.js es capaz de manejar múltiples solicitudes de manera eficiente y escalable, sin bloquear el proceso principal.
        </template>
    </category>
    
    <category>
        <pattern>¿Qué es un módulo en Node.js?</pattern>
        <template>
        En Node.js, un módulo es un archivo JavaScript que contiene código reutilizable y se puede importar en otros archivos JavaScript utilizando la función require().
        Los módulos en Node.js se utilizan para dividir el código en partes más pequeñas y manejables, 
        lo que facilita la reutilización del código y la organización de los proyectos.
        </template>
    </category>
    
    <category>
        <pattern>¿Qué es npm?</pattern>
        <template>
        npm es el sistema de gestión de paquetes de Node.js. Se utiliza para instalar, actualizar y administrar paquetes de código
        JavaScript que se pueden utilizar en proyectos de Node.js. 
        npm también permite a los desarrolladores publicar y compartir sus propios paquetes de código con la comunidad de Node.js.
        </template>
    </category>
    
    <category>
        <pattern>¿Qué es Express.js?</pattern>
        <template>
        Express.js es un marco de aplicación web para Node.js.
        Proporciona una estructura sólida para construir aplicaciones web y APIs, y ofrece una amplia variedad de funciones y herramientas para facilitar el desarrollo web.
        </template>
    </category>
    
    <category>
        <pattern>¿Cómo se instala Express.js?</pattern>
        <template>
        Para instalar Express.js, primero debes asegurarte de tener Node.js instalado en tu sistema. 
        Luego, puedes abrir una terminal y ejecutar el siguiente comando para instalar Express.js como una dependencia de tu proyecto: puedes intalarlo con : npm install express
        </template>
    </category>
    
    <category>
        <pattern>¿Cómo se crea una ruta en Express.js?</pattern>
        <template>
        En Express.js, puedes crear una ruta utilizando la función get() o post() del objeto app.
        Aquí tienes un ejemplo de cómo crear una ruta GET: 
    
        const express = require('express');
        const app = express();

        app.get('/', (req, res) => {
        res.send('¡Hola mundo!');
        });
        </template>
    </category>
    
    <category>
        <pattern>¿Qué es Socket.IO?</pattern>
        <template> 
        Socket.IO es una biblioteca para Node.js que permite la comunicación en tiempo real entre el servidor y el cliente a través de sockets web.
        Socket.IO facilita la creación de aplicaciones de chat, juegos en tiempo real, aplicaciones de colaboración y mucho más.
        </template>
    </category>
    
    <category>
        <pattern>¿Qué es una promesa en Node.js?</pattern>
        <template>
        Una promesa en Node.js es un objeto que representa el resultado pendiente de una operación asíncrona.
        Las promesas se utilizan para manejar operaciones asíncronas de manera más fácil y legible,
        y permiten encadenar operaciones asíncronas y manejar errores de manera más eficiente.
        </template>
    </category>
    
    <category>
        <pattern>¿Cómo se manejan las excepciones en Node.js?</pattern>
        <template>
        En Node.js, puedes utilizar bloques try y catch para manejar excepciones. 
        También puedes usar la función process.on('uncaughtException', callback) 
        para manejar excepciones no capturadas en el código. Sin embargo, 
        es importante recordar que el manejo de excepciones no es una solución a los errores de programación,
        y debes hacer todo lo posible para evitar que ocurran excepciones en primer lugar.
        </template>
    </category>
    
    <category>
        <pattern>¿Qué es un middleware en Express.js?</pattern>
        <template>
        Un middleware en Express.js es una función que se ejecuta antes de que se maneje una solicitud en una ruta específica. 
        Los middlewares se utilizan para realizar tareas comunes, como el manejo de sesiones, 
        la autenticación de usuarios y la validación de datos. Puedes agregar middlewares a una aplicación de Express.js utilizando la función use().
        </template>
    </category>
        
    <category>
        <pattern>¿Qué es la transmisión en Node.js?</pattern>
        <template>
        La transmisión en Node.js es una forma de procesar datos de manera eficiente, especialmente cuando se trabaja con archivos grandes o flujos de datos. 
        Una transmisión en Node.js es un objeto que recibe y envía datos de manera incremental, 
        lo que permite procesar los datos a medida que llegan, en lugar de esperar a que se carguen todos los datos antes de comenzar a procesarlos.
        </template>
    </category>
    
    <category>
        <pattern>¿Qué es la programación asíncrona en Node.js?</pattern>
        <template>
        La programación asíncrona en Node.js es un modelo de programación que permite ejecutar múltiples tareas en paralelo, 
        sin bloquear el hilo principal de ejecución. La programación asíncrona se logra utilizando devoluciones de llamada,
        promesas y async/await para manejar operaciones asíncronas y evitar bloquear el hilo principal de ejecución.
        </template>
    </category>
 
</aiml>